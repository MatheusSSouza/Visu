

package mateface;
import java.util.*;

/** Classe que possui o método main */
public class mfPlay {

      public static void main(String[] args) {
        System.out.println("Inicial");
        long memInicial=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        System.out.println("Consumo de memória inicial: "+memInicial);    
        
        System.out.println("");
        long timeA = System.currentTimeMillis();
        
        mfMalha m = new mfMalha();
        mfLeitor l = new mfLeitor();
        
        //mfelula c = new mfCelula();
        //mfVertex v = new mfVertex();
        
              //Decide que tipo de método será usado para carregar vizinhança;
        mfMalha.comHash=true;
        mfMalha.posicao = new HashMap <Integer,LinkedList<mfSemiAresta> >();
        
       
                            /**Malhas**/
        //l.leituraOFF(m,"off's/hand-olivier.OFF");
        //l.leituraOFF(m,"off's/TroncoMulherInteiroAdrianoNaVisao.OFF");
        //l.leituraOFF(m,"off's/mama.OFF");
        l.leituraOFF(m,"off's/man.OFF");
        //l.leituraOFF(m,"off's/ductos mamários.OFF");
        //l.leituraOFF(m,"off's/elephant.OFF");
        //l.leituraOFF(m,"off's/cow.OFF");
        //l.leituraOFF(m,"off's/PernaNoProcedimento.OFF");
        //l.leituraOFF(m,"off's/perna com 437 vertices.OFF");
        //l.leituraOFF(m,"off's/seringa pronta.OFF");
        long timeTotal=0;
        for(int v=0; v<mfMalha.vertice.size();v++){
        long timeAnt = System.currentTimeMillis();
        mfNivelEstrela e = new mfNivelEstrela();
        mfNivelEstrela.verticesDeNivel = new ArrayList <Integer>();
        mfNivelEstrela.celulasDeNivel = new ArrayList <Integer>();
        e.nivelDoVertice(3,v);
        //e.escreverVertices();
        long timeDe = System.currentTimeMillis();
        timeTotal = timeTotal + (timeDe-timeAnt);
        System.out.println("Tempo para guardar vértice "+v+" "+ (timeDe-timeAnt));
        }
        System.out.println("Média para segundo nível"+timeTotal/mfMalha.vertice.size());
        long timeB = System.currentTimeMillis();
        long timeF = timeB-timeA;
        int timeSeg = (int)((timeF/1000)%60);
        int timeMili = (int)(timeF) - timeSeg*1000;
        int timeMin = (int)((timeF/1000)/60);
        System.out.println("Tempo de execução = 00:"+timeMin +":"+ timeSeg + ":"+timeMili);
        System.out.println("Tempo de execução"+timeF);
         
        System.out.println("Final");
        long memFinal=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        System.out.println("Consumo de Memória Final: "+memFinal);    
        System.out.println("");
        System.out.println("Diferenca");
        System.out.println("Consumo Total: "+(memFinal-memInicial));    

  }

}
